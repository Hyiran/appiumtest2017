package com.oribo.android365.automationtest.personcenter.personinfo;
import java.math.BigDecimal;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import java.util.logging.Logger;

import org.openqa.selenium.remote.DesiredCapabilities;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;

import com.oribo.common.Constant;
import com.oribo.common.FindEelement;
import com.oribo.common.AndroidOperate;
import com.oribo.common.TestcaseFrame;
import com.oribo.common.CommonButton;
import com.oribo.common.Driver;
import com.oribo.common.SaveUserInfo;
import com.oribo.common.SetExcelDataIndex;
import com.oribo.dataprovider.AppBean;
import com.oribo.dataprovider.DataBean;
import com.oribo.dataprovider.ExcelData;
import com.oribo.report.CreateHtmlreport;
import com.oribo.report.MessageOutput;
import com.oribo.utils.GetElementUtil;
import com.oribo.log.LoggerUtil;
import com.oribo.utils.ReadExcel;
import com.sun.jna.platform.win32.Netapi32Util.User;

import io.appium.java_client.android.AndroidDriver;
import io.appium.java_client.android.AndroidElement;
public class ForgetPwTest extends TestcaseFrame{
	String currentActity ;
	Logger logger ;
	String testtime ;//记录安全页面的时间
	
	AndroidDriver driver;
	/**
	 * 静态代码块，读取数据测试
	 * @throws Exception 
	 *//*
	static {
		try {
			ReadExcel  excel =  new ReadExcel();
			ExcelData  excelData =  new ExcelData();
			//数据的清除
			bean.clear();
			excelData.setNumerSheet(4);
			excelData.setCaseType(Constant.CASETYPE_ANDROID);
			excel.readXls("personInfo_TestData.xls", excelData,bean);
			System.out.print(bean.size());
			for (int i = 0; i < bean.size(); i++) {
				System.out.print(bean.get(i).toString());
			}
		} catch (Exception e) {
		}
	}
*/  
/*	@BeforeMethod
	public void beforeMethod() throws Exception{
		DesiredCapabilities capabilities=new DesiredCapabilities();
        capabilities.setCapability("platformName", "Android");
        capabilities.setCapability("platformVersion", "6.0.1");
        capabilities.setCapability("deviceName","Android Emulator");
        capabilities.setCapability("appPackage", "com.orvibo.homemate");
        capabilities.setCapability("appActivity", ".common.launch.LaunchActivity");
        capabilities.setCapability("unicodeKeyboard", true);
        capabilities.setCapability("resetKeyboard", true);
        driver = new AndroidDriver(new URL("http://127.0.0.1:4723/wd/hub"), capabilities);
        driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);//闅愬紡绛夊緟锛屽叏灞�绛夊緟10s涓嶇鍏冪礌鏄惁宸茬粡鍔犺浇     
    	

    }*/
	
	@BeforeTest
	public void setUp() throws Exception{
		 
		//读取数据测试
		try {
			ReadExcel  excel =  new ReadExcel();
			ExcelData  excelData =  new ExcelData();
			//数据的清除
			bean.clear();
			excelData.setNumerSheet(4);
			excelData.setCaseType(Constant.CASETYPE_ANDROID);
			if (SaveUserInfo.getUserInfo().getLogingType() == Constant.LOGING_TYPE_EMAIL) {
				excelData.setFirstIndex(14);
			}
			excel.readXls("personInfo_TestData.xls", excelData,bean);
			System.out.print(bean.size());
			for (int i = 0; i < bean.size(); i++) {
				System.out.print(bean.get(i).toString());
			}
		} catch (Exception e) {
		}
	//	currentActity = Driver.getAndroidDriver(null).currentActivity();  *
		System.out.println(currentActity);
	     newSleep(2);
		//Driver.getAndroidDriver(null).findElementByName("我的").click(); *
		Driver.getAndroidDriver(null).findElementById("com.orvibo.homemate:id/text").click();
		System.out.println("点击成功");
		 newSleep(1);
//		FindEelement.findByIdClick("com.orvibo.homemate:id/rl_userInfo");
		FindEelement.findByIdClick("com.orvibo.homemate:id/iv_personal_user_icon");//2.0此处无"个人中心"
		 newSleep(1);
		Driver.getAndroidDriver(null).findElementByName("修改密码").click();	
		Driver.getAndroidDriver(null).findElementByName("忘记旧密码").click();
		//创建longger 日志文件
		logger =LoggerUtil.getwriteFileLog(Constant.FORGETPW,AppBean.getAppBean().getApk()+"_"+AppBean.getAppBean().getPhone()+"_"+"忘记密码", ForgetPwTest.class);	
		System.out.println("初始化完毕");	
	}

	@Test
	public  void testPhone() {
		System.out.println("测试开始");
		if ( getInputText(0)) {
			if (inputBtnUnenaled(1,0)) {//输入为空
				if (noRightAccount(2)) {
					if (rightAccount(3)) {
						if (noAccount(4)) {
							if (isAccount(5)) {
								if (test_01(6)) {	//安全验证
									if (test_02(7)) {
										if (test_03(8)) {
											if (test_04(9)) {
												if (test_05(10)) {
													if (test_06(11)) {
													}
												}
											}
										}
									}
								}
							}
						}
					}  
				}
			}	
		}	
	}

	/**
	 * 输入框的获取和提示语的检查
	 * @param index
	 * @return
	 */
	public boolean getInputText(int index){
		DataBean  data =  bean.get(index);
		LoggerUtil.startTest(data.getTestCaseName(), logger);
		try {
			System.out.println("测试开始");
			AndroidElement   editext = AndroidOperate.getElementByType(data.getLocationElement(), data.getElementAttribute());
			if (editext != null &&editext.getText().contains(data.getData())) {
				newAssertEquals(Driver.getAndroidDriver(null), data ,data.getExpectValue(), logger, null);	
			} else{
				if (editext== null) {
					newAssertEquals(Driver.getAndroidDriver(null), data ,data.getLocationElement()+"获取元素失败", logger, null);	
				}

			}
		} catch (Exception e) {
			// TODO: handle exception
			newAssertEquals(Driver.getAndroidDriver(null), data ,e.getMessage(), logger, null);	
		}

		LoggerUtil.endTest(data.getTestCaseName(), logger);
		return true;	
	}

	/**
	 * 按钮不能点击
	 * @param index
	 * @param classname
	 * @param type
	 * @return
	 */
	public boolean inputBtnUnenaled(int index,int type){
		DataBean  data =  bean.get(index);
		LoggerUtil.startTest(data.getTestCaseName(), logger);
		AndroidElement  element = GetElementUtil.getEdit(logger, null).get(0);
		element.clear();
		AndroidElement   next = GetElementUtil.getNext(logger);
		element.clear();
		//element.sendKeys(bean.getData());
		if (!next.isEnabled()) {
			//btnUnenanled(next, bean, logger)
			newAssertEquals(Driver.getAndroidDriver(null), data ,data.getExpectValue(), logger, null);	;	
		} else{
			newAssertEquals(Driver.getAndroidDriver(null),data,"输入为空能按钮能点击" , logger, "");
		}		
		//LoggerUtil.closeLogger(logger);
		LoggerUtil.endTest(data.getTestCaseName(), logger);
		return true;
	}		

	/**
	 * 输入不正确的账号
	 * @param index
	 * @return
	 */
	public boolean noRightAccount(int index){
		DataBean  data =  bean.get(index);
		LoggerUtil.startTest(data.getTestCaseName(), logger);
		AndroidElement  element = GetElementUtil.getEdit(logger, null).get(0);
		element.clear();
		element.sendKeys(data.getData());
		AndroidElement   next = GetElementUtil.getNext(logger);
		if (!next.isEnabled()) {
			//btnUnenanled(next, bean, logger)
			newAssertEquals(Driver.getAndroidDriver(null), data ,data.getExpectValue(), logger, null);	;	
		} else{
			newAssertEquals(Driver.getAndroidDriver(null),data,"输入非电话号码能点击\"下一步\"" , logger, "");
		}	
		LoggerUtil.endTest(data.getTestCaseName(), logger);
		return true;

	}


	/**
	 * 输入存在的正确的手机账号格式
	 * @param index
	 * @return
	 */
	public boolean rightAccount(int index){
		DataBean  data =  bean.get(index);
		LoggerUtil.startTest(data.getTestCaseName(), logger);
		AndroidElement  element = GetElementUtil.getEdit(logger, null).get(0);
		element.clear();
		element.sendKeys(data.getData());
		AndroidElement   next = GetElementUtil.getNext(logger);
		if (next.isEnabled()) {
			//btnUnenanled(next, bean, logger)
			newAssertEquals(Driver.getAndroidDriver(null), data ,data.getExpectValue(), logger, null);	;	
		} else{
			newAssertEquals(Driver.getAndroidDriver(null),data,"输入非电话号码能点击\"下一步\"" , logger, "");
		}	
		LoggerUtil.endTest(data.getTestCaseName(), logger);
		return true;

	}

	/**
	 * 输入不存在的账号
	 * @param index
	 * @return
	 */
	public boolean noAccount(int index){
		DataBean  data =  bean.get(index);
		LoggerUtil.startTest(data.getTestCaseName(), logger);
		AndroidElement  element = GetElementUtil.getEdit(logger, null).get(0);
		//element.clear();
		//element.sendKeys(data.getData());
		AndroidElement   next = GetElementUtil.getNext(logger);
		next.click( );
		System.out.println("focusable"+element.getAttribute("focusable").equals("true"));
		if (element.getAttribute("focusable").equals("true")) {
			//btnUnenanled(next, bean, logger)
			newAssertEquals(Driver.getAndroidDriver(null), data ,data.getExpectValue(), logger, null);	;	
		} else{
			newAssertEquals(Driver.getAndroidDriver(null),data,"输入不存在的账号出现错误" , logger, "");
		}	
		LoggerUtil.endTest(data.getTestCaseName(), logger);
		return true;

	}

	/**
	 * 输入存在的账号
	 * @param index
	 * @return
	 */
	public boolean isAccount(int index){
		DataBean  data =  bean.get(index);
		LoggerUtil.startTest(data.getTestCaseName(), logger);
		AndroidElement  element = GetElementUtil.getEdit(logger, null).get(0);
		element.clear();
		element.sendKeys(SaveUserInfo.getUserInfo().getAccount());
		AndroidElement   next = GetElementUtil.getNext(logger);
		next.click();
		if (!currentActity.equals(Driver.getAndroidDriver(null).currentActivity())) {
			//btnUnenanled(next, bean, logger)
			newAssertEquals(Driver.getAndroidDriver(null), data ,data.getExpectValue(), logger, null);	
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			String date = sdf.format(new Date(Long.valueOf(System.currentTimeMillis())));
			System.out.println(date );
			testtime = date.substring(date.lastIndexOf(":")+1, date.length());
		} else{
			newAssertEquals(Driver.getAndroidDriver(null),data,"输入存在的账号不能成功跳转到安全验证页面" , logger, "");
		}	
		LoggerUtil.endTest(data.getTestCaseName(), logger);
		return true;

	}

	//安全验证的调用

	public boolean test_01(int index){
		DataBean  data =  bean.get(index);
		System.out.println("test01");
		SaveModifyTest.checkSend_01(data, logger);
		return true;

	}

	public boolean test_02(int index){
		DataBean  data =  bean.get(index);
		System.out.println("test02");
		SaveModifyTest.cheakctime_02(data, logger, testtime);
		return true;

	}
	public boolean test_03(int index){
		DataBean  data =  bean.get(index);
		SaveModifyTest.cheaksend_03(data, logger);
		return true;

	}
	/*public boolean test_04(int index){
		DataBean  data =  bean.get(index);
		SaveModifyTest.checkText_04(Constant.LOGING_TYPE_PHONE,data, logger, SaveUserInfo.getUserInfo().getAccount());
		return true;

	}*/
	//10.25修改
	public boolean test_04(int index){
		DataBean  data =  bean.get(index);
		SaveModifyTest.checkText_04(SaveUserInfo.getUserInfo().getLogingType(),data, logger, SaveUserInfo.getUserInfo().getAccount());
		return true;

	}
	public boolean test_05(int index){
		DataBean  data =  bean.get(index);
		SaveModifyTest.inputNone_05(data, logger);
		return true;

	}
	public boolean test_06(int index){
		DataBean  data =  bean.get(index);
		SaveModifyTest.inputError_06(data, logger);
		return true;

	}
	
	@AfterTest
	public void tearDown(){
		//关闭appium 资源
		Driver.getAndroidDriver(null).quit();
		//关闭 html 的写操作
		 CreateHtmlreport.closeLog();
	}
}
