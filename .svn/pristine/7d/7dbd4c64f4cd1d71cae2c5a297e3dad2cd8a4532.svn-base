package com.oribo.android365.testcase;

import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;
import org.testng.Assert;
import org.testng.AssertJUnit;

import java.io.File;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import org.openqa.selenium.By;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Parameters;
import org.testng.annotations.Test;

import com.oribo.common.AppOperate;
import com.oribo.common.EditText;
import com.oribo.common.TestcaseFrame;
import com.oribo.common.ToolFunctions;
import com.oribo.database.DBHelperMysql;
import com.oribo.database.Query;
import com.oribo.dataprovider.AppBean;
import com.oribo.dataprovider.Constant;
import com.oribo.log.Log;
import com.oribo.utils.FileOperate;
import com.oribo.utils.compareimage;

import io.appium.java_client.android.AndroidDriver;
import io.appium.java_client.android.AndroidElement;

public class HomeManage extends TestcaseFrame{
	AndroidDriver<AndroidElement> driver;
	AppBean  appbean = AppBean.getAppBean();
	
	
	@BeforeClass(alwaysRun=true)
	@Parameters({ "port","udid","phone","platformVersion", "apk","testaccount","testpassword","reportreceiver"})
	public void init(String port, String udid,String phone,String platformVersion ,String apk,String testaccount,String testpassword,String reportreceiver )
	{
		//保存app的基础信息		
				appbean.setUid(udid);
				appbean.setPort( port);
				appbean.setPhone(phone);
				appbean.setApk(apk);
				appbean.setPlatformVersion(platformVersion);
		
	}
	@BeforeMethod(alwaysRun=true)
	public void beforeMethod()
	{   
		super.testSetUp();
		driver=super.getDriver();
		logging();

	}

	/**
	 * 检查默认家庭在家庭管理主页面的显示
	 */
	
	@Test(groups={"错误"})
	public void checkdefault()
	{   
		enterhomemanage();
		//获取帐号的名称
		String expectedname=getaccountname();
		//判断默认显示是否正确，如管理员名称是否显示正确
		Assert.assertTrue(driver.findElement(By.id("com.orvibo.homemate:id/memberName")).getText().equals(expectedname));
		Assert.assertTrue(driver.findElementByAndroidUIAutomator("text(\"默认\")").isDisplayed());
		Assert.assertTrue(driver.findElement(By.id("com.orvibo.homemate:id/familyCheck")).isDisplayed());
		//判断是否存在家庭管理的标题
		AppOperate.exitElement("com.orvibo.homemate:id/title_tv", driver);
		

	}
	
	/**
	 * 检查新建的家庭在家庭管理主页面的显示
	 */
	@Test(groups={"添加"})
	public void addhome()
	{   
		
		enterhomemanage();
		//判断当前已自创多少个家庭
		int addnumber=driver.findElementsByAndroidUIAutomator("text(\""+getdefaultfamily()+"\")").size();
	
		AppOperate.click(driver.findElement(By.id("com.orvibo.homemate:id/right_iv")), "点击新建家庭按扭");
		Assert.assertTrue(driver.findElementByAndroidUIAutomator("text(\"创建家庭\")").isDisplayed());
		//输入家庭名称
		EditText familyName=new EditText(driver.findElement(By.id("com.orvibo.homemate:id/familyName")));
		familyName.inputfivechar(driver);
		//截图并保存
		String setbefore=ToolFunctions.getRandomstring(1);
		screenCapCompare(driver, setbefore);
		//设置家庭头像
		AndroidElement familyIcon=driver.findElement(By.id("com.orvibo.homemate:id/familyIcon"));
		//拍照设置头像
		setphotobycamera(familyIcon);
		//查看照片是否设置成功,截图并对比
		String setafter=ToolFunctions.getRandomstring(1);
		screenCapCompare(driver, setafter);
		Assert.assertFalse(compareimage.sameAs(FileOperate.getScreencapFilePath()+File.separator+setbefore+".png", FileOperate.getScreencapFilePath()+File.separator+setafter+".png", 0.97));
		//点击创建家庭
		AppOperate.click(driver.findElement(By.id("com.orvibo.homemate:id/familyAddBtn")), "点击创建家庭");
		AppOperate.waitelementexit(driver, By.id("com.orvibo.homemate:id/title_tv"), 10);
		//判断是否返回到家庭管理界面,并判断是否显示新建的家庭
		Assert.assertTrue(driver.findElementByAndroidUIAutomator("text(\""+familyName.getfivechar()+"\")").isDisplayed());
		
		
	}
	
	/**
	 * 修改默认家庭的家庭名称
	 */
	@Test
	public void edithome()
	{
		enterhomemanage();
		AppOperate.click(driver.findElements(By.id("com.orvibo.homemate:id/familyName")).get(0), "点击进入默认家庭");
		//点击进入默认家庭
		AppOperate.click(driver.findElementByAndroidUIAutomator("text(\"家庭名称\")"), "点击家庭名称w");
		AndroidElement name=driver.findElement(By.id("com.orvibo.homemate:id/input_family_nickname_edit"));
		//AppOperate.clear(name, "清除名称");
		String editname=ToolFunctions.getRandomstring(5);
		AppOperate.sendKeys(name, "重新输入家庭名称", editname);
		AppOperate.click(driver.findElementByAndroidUIAutomator("text(\"保存\")"), "点击保存按扭");
		AppOperate.waitelementexit(driver, By.id("com.orvibo.homemate:id/title_tv"), 10);
		Assert.assertTrue(driver.findElementByAndroidUIAutomator("text(\""+editname+"\")").isDisplayed());
		
		
	}
 /**
  * 检查默认家庭的排序
  */
	@Test()
	public void sort()
	{
		enterhomemanage();
		List<AndroidElement> list=driver.findElements(By.id("com.orvibo.homemate:id/familyName"));
		Assert.assertEquals(list.get(0).getText(), getdefaultfamily());
	}
	
	/**
	 *家庭成员页面检查——有成员
	 * 家庭成员页面检查——无成员
	 * 邀请家庭成员页面检查
	 * 家庭邀请手机号
	 * 发起邀请成功
	 * 编辑成员页面检查
	 * 编辑成员页面，删除成员
	 */
	@Test()
	public void memberoffamily()
	{
		enterhomemanage();
		String defaultname=getdefaultfamily();
		//服务器获取默认家庭成员个数
		int familynumbers=getfamilynumbers(defaultname);
		Log.logInfo("当前家庭有"+familynumbers+"个成员");
		AppOperate.click(driver.findElementByAndroidUIAutomator("text(\""+getdefaultfamily()+"\")"), "点击进入默认家庭");
		AppOperate.click(driver.findElementByAndroidUIAutomator("text(\"家庭成员\")"), "进入家庭成员列表");
		//判断成员列表是否为空
		if(!AppOperate.ifexitElement("com.orvibo.homemate:id/tv_name", driver))
		{
			//为空界面默认应有提示语
			AppOperate.exitElement("com.orvibo.homemate:id/empty_iv", driver);
			Assert.assertTrue(driver.findElementByAndroidUIAutomator("text(\"你还没有添加家庭成员\")").isDisplayed());
		}
		else{
			//编辑成员，点击任意成员
			AppOperate.click(driver.findElement(By.id("com.orvibo.homemate:id/tv_name")), "点击任意成员");
			//判断是否有删除按扭
			AppOperate.exitElement("com.orvibo.homemate:id/info_family_delete", driver);
			//设置备注
			AndroidElement edit=driver.findElement(By.id("com.orvibo.homemate:id/userNicknameEditText"));
			String inputname=ToolFunctions.getRandomstring(5);
			edit.sendKeys(inputname);
			//点击保存
			AppOperate.click(driver.findElement(By.id("com.orvibo.homemate:id/right_tv")), "点击保存按扭");
			AppOperate.waitelementexit(driver, By.id("com.orvibo.homemate:id/right_iv"), 5);
			//删除成员
			AppOperate.click(driver.findElement(By.id("com.orvibo.homemate:id/iv_delete")), "点击删除按扭");
			//判断是否有弹框，有的话点击删除
			Assert.assertTrue(driver.findElementByAndroidUIAutomator("text(\"提  示\")").isDisplayed());
			AppOperate.click(driver.findElementByAndroidUIAutomator("text(\"删除\")"), "弹框内点击删除");
			//判断是否删除成功，服务器框默认家庭成员个数减1
			
			Assert.assertEquals(getfamilynumbers(defaultname), familynumbers-1);
		}
		//邀请成员
		AppOperate.click(driver.findElement(By.id("com.orvibo.homemate:id/right_iv")), "点击添加成员按扭");
		
		 //判断“发起邀请”是否可点击
		 Assert.assertFalse(driver.findElementByAndroidUIAutomator("text(\"发起邀请\")").isEnabled(), "发起邀请默认是激活的");
		 //点击联系人选择按扭
		 AppOperate.click(driver.findElement(By.id("com.orvibo.homemate:id/contactImageView")), "点击添加联系人选择按扭");
		 //判断是否跳 转到联系人选择界面
		Assert.assertTrue( ToolFunctions.cmdmessage("adb shell dumpsys window w|grep name=", "contacts"), "未跳转到联系人选择界面");
		//返回邀请家人界面
		AppOperate.sendKeyEvent(4, "返回家庭管理界面", driver);
		//手动输入号码,分别输入小于11位，11位，大于11位
		EditText edit=new EditText(driver.findElement(By.id("com.orvibo.homemate:id/accountEditText")));
		 //清掉再输入11位未注册的手机号
		 edit.clear();
		 edit.inputphonenumber(driver);
		 Assert.assertTrue(driver.findElementByAndroidUIAutomator("text(\"发起邀请\")").isEnabled(), "号码等于11位发起邀请未被激活");
		 //点击发起邀请
		 AppOperate.click(driver.findElement(By.id("com.orvibo.homemate:id/send_invite_text")), "点击发起邀请按钮");
		 
		 //判断是否会弹出未注册的提示框
		 AppOperate.waitForText(10, "com.orvibo.homemate:id/titleTextView");
		 AppOperate.exitElement("该用户尚未注册", driver);
		 AppOperate.exitElement("试试微信快速邀请吧", driver);
		 //点击微信邀请，判断是否会跳 转到微信界面
		 AppOperate.click(driver.findElement(By.id("com.orvibo.homemate:id/rightButton")), "点击微信邀请");
		 Assert.assertTrue(ToolFunctions.cmdmessage("adb shell dumpsys window w|grep name=", "com.tencent.mm"), "未跳转到微信界面");
		//返回邀请家人界面
		AppOperate.sendKeyEvent(4, "返回家庭管理界面", driver);
	
	}
	

	/**
	 * 默认家庭数显示
	 * */
 @Test
 public void checkfamilynumber()
 {
	 int familynumber=familynumbers();
	 System.out.println("家庭数是："+familynumber);
	 enterhomemanage();
	 //判断展示家庭数是否与服务器一致
	 Assert.assertEquals(driver.findElements(By.id("com.orvibo.homemate:id/familyIcon")).size(), familynumber);
	 
	 
 }
	/**
	 * 检查加入的家庭在家庭管理主页面的显示
	 * 默认的家庭切换至新建的家庭
	 * 新建家庭成功，进入家庭详情
	 * 删除默认家庭
	 */
	 @Test(groups = { "家庭详情" })
	 public void familydetails()
	 {     
		 enterhomemanage();
		 String sql=null;
		   int i=1;
		   String usertype=null,familyname=null,showindex=null;
		   
		   if(getaccount().getLogingType()==Constant.LOGING_TYPE_EMAIL)
		   {
			   sql="select f.familyName,fu.userType,f.showIndex from family as f,familyUsers as fu,account2 as a "
				   		+ "where fu.familyId=f.familyId and fu.userId=a.userId and a.email='"+TestcaseFrame.getaccount().getAccount()+
				   		"' and fu.delFlag=0";
		   }
		   else if(getaccount().getLogingType()==Constant.LOGING_TYPE_PHONE)
		   {
			   sql="select f.familyName,fu.userType,f.showIndex from family as f,familyUsers as fu,account2 as a "
				   		+ "where fu.familyId=f.familyId and fu.userId=a.userId and a.phone='"+TestcaseFrame.getaccount().getAccount()+
				   		"' and fu.delFlag=0";
		   }
		  
		   DBHelperMysql db=new DBHelperMysql(sql,Constant.INTERNALURL,Constant.DATABASEACCOUNTINTER,Constant.DATABASEACCOUNTPASSWORD);
		   try {  
			   ResultSet  ret = db.pst.executeQuery();//执行语句，得到结果集 
	           while (ret.next()) { 
	
	        	   familyname=ret.getString(1); 
	        	   AndroidElement familyelement=driver.findElementByAndroidUIAutomator("text(\""+familyname+"\")");
	        	   Log.logInfo("第"+i+"个家庭,家庭名称为:"+familyname);
	        	   AppOperate.click(familyelement, "点击第"+i+"个家庭");
	        	   usertype=ret.getString(2);
	        	   showindex=ret.getString(3);
	        	   System.out.println("showindex为"+showindex);
	        	   //为0则为管理员权限家庭
	        	   if(usertype.equals("0"))
	        	   {   
	        		   
	        		   //showindex为1则为默认家庭
	        		   if(showindex.equals("1"))
	        		   {  
	        			   Log.logInfo(familyelement.getText()+"为默认家庭");
	        			 //权限为管理 员时，家庭详情没有删除或退出家庭按扭
		        		   AppOperate.notExitElement("android.widget.Button", driver);
		        		   AppOperate.sendKeyEvent(4, "返回到家庭管理界面", driver);
		 
	        		   }
	        		   else
	        		   {
	        		   Log.logInfo(familyelement.getText()+"为管理员家庭");
	        		   //非默认家庭且为自创家庭有删除家庭按钮,且权限显示为管理员
	        		   Assert.assertTrue(driver.findElementByAndroidUIAutomator("text(\"删除家庭\")").isDisplayed());
	        		   Assert.assertTrue(driver.findElementByAndroidUIAutomator("text(\"管理员\")").isDisplayed());
	        		   //删除家庭
	        		   AppOperate.click(driver.findElementByAndroidUIAutomator("text(\"删除家庭\")"), "点击删除家庭");
	        		  
	        		   //弹出提示框时点击删除
	        		   AppOperate.click(driver.findElementByAndroidUIAutomator("text(\"删除\")"), "弹出提示框点击删除");
	        		   //等待删除成功,以添加按扭为判定标准
	        		   AppOperate.waitelementexit(driver, By.id("com.orvibo.homemate:id/right_iv"), 7);
	        		   //查看是否删除成功，界面不再展示
	        	
	        		   try{
	        		   Assert.assertFalse(driver.findElementByAndroidUIAutomator("text(\""+familyname+"\")").isDisplayed());
	        		   Assert.assertTrue(false);
	        		   }
	        		   catch(Exception e)
	        		   {
	        			   Log.logInfo("家庭删除成功");
	        		   }
	        		   
	        		   }
	        	   }
	        	   //为1则为成员家庭
	        	   else if(usertype.equals("1"))
	        	   {   
	        		   Log.logInfo(familyelement.getText()+"为成员家庭");
	        		   //家庭名称不可点击
	        		   AppOperate.click(driver.findElementByAndroidUIAutomator("text(\"家庭名称\")"), "查看成员家庭家庭名称是否可点击");
	        		   Assert.assertTrue(driver.findElementByAndroidUIAutomator("text(\"家庭详情\")").isDisplayed());
	        		   //家庭头像不可点击
	        		   AppOperate.click(driver.findElementByAndroidUIAutomator("text(\"家庭头像\")"), "查看成员家庭家庭名称是否可点击");
	        		   Assert.assertTrue(driver.findElementByAndroidUIAutomator("text(\"家庭详情\")").isDisplayed());
	        		   
	        		   //查看权限显示
	        		   Assert.assertTrue(driver.findElementByAndroidUIAutomator("text(\"家庭成员\")").isDisplayed());
	        		   //查看是否有退出家庭的按扭
	        		   AndroidElement exit=driver.findElementByAndroidUIAutomator("text(\"退出家庭\")");
	        		   Assert.assertTrue(exit.isDisplayed());
	        		   //点击退出家庭
	        		   AppOperate.click(exit, "点击退出家庭");
	        		   //弹出提示框后点击退出
	        		   AppOperate.click(driver.findElementByAndroidUIAutomator("text(\"退出\")"), "点击确认退出");
	        		   
	        		   //等待删除成功,以添加按扭为判定标准 
	        		   AppOperate.waitelementexit(driver, By.id("com.orvibo.homemate:id/right_iv"), 7);
	        		   //查看是否删除成功，界面不再展示
	        		   try{
		        		   Assert.assertFalse(driver.findElementByAndroidUIAutomator("text(\""+familyname+"\")").isDisplayed());
		        		   Assert.assertTrue(false);
		        		   }
		        		   catch(Exception e)
		        		   {
		        			   Log.logInfo("退出家庭成功");
		        		   }
	        		   
	        	   }
	        
	        	   i++;
	        	   
	        	       
	     
	           }//显示数据  
	           ret.close();  
	           db.close();//关闭连接  
	       } catch (SQLException e) {  
	           e.printStackTrace();  
	       }  
  
	 }

	 
	 /**
	  * 判断当前账号有几个家庭
	  */
	 public static int familynumbers()
	 {   
		 int count=0;
		 String sql = null;
		 //判断登录的什么类型的账号
		 if(getaccount().getLogingType()==Constant.LOGING_TYPE_EMAIL)
		 {
			 sql=" select f.familyName from family as f "
						+ "where familyId in"
						+ "("
						+ "select fu.familyId from account2 as a,familyUsers as fu "
						+ "where fu.userId=a.userId and a.email='"+TestcaseFrame.getaccount().getAccount()+"' and fu.delFlag=0"
						+")";
		 }
		 else if(getaccount().getLogingType()==Constant.LOGING_TYPE_PHONE)
		 {
			 sql=" select f.familyName from family as f "
						+ "where familyId in"
						+ "("
						+ "select fu.familyId from account2 as a,familyUsers as fu "
						+ "where fu.userId=a.userId and a.phone='"+TestcaseFrame.getaccount().getAccount()+"' and fu.delFlag=0"
						+")";
		 }
		

	//	 System.out.println("查询语句是:"+sql);
		 DBHelperMysql db=new DBHelperMysql(sql,Constant.INTERNALURL,Constant.DATABASEACCOUNTINTER,Constant.DATABASEACCOUNTPASSWORD);
		   try {  
			   ResultSet  ret = db.pst.executeQuery();//执行语句，得到结果集  
	           while (ret.next()) { 
	        	   count++;     
	     
	           }//显示数据  
	           ret.close();  
	           db.close();//关闭连接  
	       } catch (SQLException e) {  
	           e.printStackTrace();  
	       }  
	   
		   return count;
		 
	 }
	 /**
	  * 判断第一个家庭的类型,1的话是子成员，0为管理 员
	  */
	 public String familytype()
	 {
	   String type=null;
	   String sql="select f.userType from account2 as a,familyUsers as f where f.userId=a.userId and "
			 		+ "email='"+TestcaseFrame.getaccount().getAccount()+"' or phone='"+TestcaseFrame.getaccount().getAccount()+"' and f.delFlag=0";
	   DBHelperMysql db=new DBHelperMysql(sql,Constant.INTERNALURL,Constant.DATABASEACCOUNTINTER,Constant.DATABASEACCOUNTPASSWORD);
	   try {  
		   ResultSet  ret = db.pst.executeQuery();//执行语句，得到结果集  
           while (ret.next()) { 
        	   type=ret.getString(1);
        	       break;
     
           }//显示数据  
           ret.close();  
           db.close();//关闭连接  
       } catch (SQLException e) {  
           e.printStackTrace();  
       }  
		return type;
	 }
	 
	 /**
	  * 获取默认家庭的名称
	  */
	 public  String getdefaultfamily()
	 {  
		 String sql=null;
		 String defaultname=null;
		 if(getaccount().getLogingType()==Constant.LOGING_TYPE_EMAIL)
		 {
			sql="select f.familyName,fu.userType,f.showIndex from family as f,familyUsers as fu,account2 as a "
					+ "where fu.familyId=f.familyId and fu.userId=a.userId "
					+ "and a.email='"+TestcaseFrame.getaccount().getAccount()+"' and fu.delFlag=0 and f.showIndex=1";
		 }
		 else if(getaccount().getLogingType()==Constant.LOGING_TYPE_PHONE)
		 {
				sql="select f.familyName,fu.userType,f.showIndex from family as f,familyUsers as fu,account2 as a "
						+ "where fu.familyId=f.familyId and fu.userId=a.userId "
						+ "and a.phone='"+TestcaseFrame.getaccount().getAccount()+"' and fu.delFlag=0 and f.showIndex=1";
		 }
		 
		   DBHelperMysql db=new DBHelperMysql(sql,Constant.INTERNALURL,Constant.DATABASEACCOUNTINTER,Constant.DATABASEACCOUNTPASSWORD);
		   try {  
			   ResultSet  ret = db.pst.executeQuery();//执行语句，得到结果集  
	           while (ret.next()) { 
	        	   defaultname=ret.getString(1);
	     
	     
	           }//显示数据  
	           ret.close();  
	           db.close();//关闭连接  
	       } catch (SQLException e) {  
	           e.printStackTrace();  
	       }  
		 
		 return defaultname;
		 
	 }
	/**
	 * 获取家庭成员个数
	 * @return
	 */
	 public static int getfamilynumbers(String familyname)
	 {   
		 int number=0;
		 String sql="select count(*)  from family as f left join familyUsers as fu  "
		 		+ "on fu.familyId=f.familyId,account2 as a  where  f.familyName='"+familyname+
		 		"' and fu.delFlag=0 and f.delFlag=0 and fu.userId=a.userId";
		   DBHelperMysql db=new DBHelperMysql(sql,Constant.INTERNALURL,Constant.DATABASEACCOUNTINTER,Constant.DATABASEACCOUNTPASSWORD);
		   try {  
			   ResultSet  ret = db.pst.executeQuery();//执行语句，得到结果集  
	           while (ret.next()) { 
	        	   number=ret.getInt(1);
	     
	     
	           }//显示数据  
	           ret.close();  
	           db.close();//关闭连接  
	       } catch (SQLException e) {  
	           e.printStackTrace();  
	       }  
		   return number-1;
		 
	 }
	 /**
	  * 获取登录的帐户名称
	  * @return
	  */
	public  String getaccountname()
	{
		String homename;
		//获取帐号的名称,如果userName为空则显示账号名称
		String sql1=null,sql2=null;
		
		
		 if(getaccount().getLogingType()==Constant.LOGING_TYPE_EMAIL)
		 {
			 sql1="select userName from account2 where email='"+TestcaseFrame.getaccount().getAccount()+"'";
	         sql2="select * from account2 where email='"+TestcaseFrame.getaccount().getAccount()+"'";
		 }
		 else if(getaccount().getLogingType()==Constant.LOGING_TYPE_PHONE)
		 {
			 sql1="select userName from account2 where phone='"+TestcaseFrame.getaccount().getAccount()+"'";
			 sql2="select * from account2 where phone='"+TestcaseFrame.getaccount().getAccount()+"'";
		 }
		 
		 //name为从数据库查询到的名称
		 String name=Query.executSql(sql1,1,Constant.INTERNALURL,Constant.DATABASEACCOUNTINTER,Constant.DATABASEACCOUNTPASSWORD);
		 System.out.println("");
		if(name.trim().equals(""))
		{
		
		String expectedname=Query.executSql(sql2,1,Constant.INTERNALURL,Constant.DATABASEACCOUNTINTER,Constant.DATABASEACCOUNTPASSWORD);
		homename=expectedname;
		}
		else 
			homename=name;
		return homename;
		
	}
	
	public static void main(String args[])
	{
		//System.out.println("家庭数"+familynumbers());
		//sethomemanagename();
		System.out.println(getfamilynumbers("ugi53"));
		
		
	}
	

	
	
	/**
	 * 进入家庭管理界面
	 */
	public void enterhomemanage()
	{
		newSleep(2);
		AppOperate.click(driver.findElementByAndroidUIAutomator("text(\"我的\")"), "点击'我的'");
		AppOperate.click(driver.findElementByAndroidUIAutomator("text(\"家庭管理\")"), "点击'我的'");
	}
	
	
	
	

	@AfterMethod(alwaysRun=true)
	public void tearDown(){
		//关闭appium 资源
		Log.logInfo("**********");
		driver.quit();
		
	}

}
