package com.oribo.ReadExcelCase;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.Field;
import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFDateUtil;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFCell;

import com.oribo.common.Constant;
import com.oribo.dataprovider.DataBean;
import com.oribo.dataprovider.ExcelData;

/**
 * 读取excel表的测试用例
 * @author cindy 2016-10-11
 *
 */
public class ReadExcel {

	/**
	 * 读取excel 状态监控
	 * @author cindy
	 *
	 */
	public interface ReadExcelListener{
		/**
		 * 读取到哪一行
		 * @param row
		 */
		void readIng(int row);

		/**
		 * 读取错误的信息
		 * @param message
		 */
		void readFail(String message);

		/**
		 * 读取成功
		 */
		void readSucces(Map<Integer, DataBean>  data);
	}

	private ReadExcelListener   readExcelListener;


	public ReadExcelListener getReadExcelListener() {
		return readExcelListener;
	}

	public void setReadExcelListener(ReadExcelListener readExcelListener) {
		this.readExcelListener = readExcelListener;
	}

	/*	*//**
	 * read the Excel file
	 * @param path the path of the Excel file
	 * @return
	 * @throws IOException
	 *//*
	public List<LoginXls> readExcel(String path) throws IOException {
		if (path == null || Common.EMPTY.equals(path)) {
			return null;
		} else {
			String postfix = Util.getPostfix(path);
			if (!Common.EMPTY.equals(postfix)) {
				if (Common.OFFICE_EXCEL_2003_POSTFIX.equals(postfix)) {
					return readXls(path);
				} else if (Common.OFFICE_EXCEL_2010_POSTFIX.equals(postfix)) {
					return readXlsx(path);
				}
			} else {
				System.out.println(path + Common.NOT_EXCEL_FILE);
			}
		}
		return null;
	}*/
	/*

     /**
	 * Read the Excel 2010
	 * @param path the path of the excel file
	 * @return
	 * @throws IOException
	 */
	/**

	public List<LoginXls> readXlsx(String path) throws IOException {
		System.out.println(Common.PROCESSING + path);
		InputStream is = new FileInputStream(path);
		XSSFWorkbook xssfWorkbook = new XSSFWorkbook(is);
		LoginXls student = null; 
		List<Student> list = new ArrayList<Student>();
		// Read the Sheet
		for (int numSheet = 0; numSheet < xssfWorkbook.getNumberOfSheets(); numSheet++) {
			XSSFSheet xssfSheet = xssfWorkbook.getSheetAt(numSheet);
			if (xssfSheet == null) {
				continue;
			}
			// Read the Row
			for (int rowNum = 1; rowNum <= xssfSheet.getLastRowNum(); rowNum++) {
				XSSFRow xssfRow = xssfSheet.getRow(rowNum);
				if (xssfRow != null) {
					student = new Student();
					XSSFCell no = xssfRow.getCell(0);
					XSSFCell name = xssfRow.getCell(1);
					XSSFCell age = xssfRow.getCell(2);
					XSSFCell score = xssfRow.getCell(3);
					student.setNo(getValue(no));
					student.setName(getValue(name));
					student.setAge(getValue(age));
					student.setScore(Float.valueOf(getValue(score)));
					list.add(student);
				}
			}
		}
		return list;
	}
	/*



	/**
	 * Read the Excel 2003-2007  读取整个Excel,传入的numerSheet <0 就是读取整张表，大于0 读取第几个表，传送的的读取 index 开始读取数据的行和结束行
	 * @param path the path of the Excel
	 * @return
	 * @throws IOException
	 */
	public void readXls(String path,ExcelData  data,Map<Integer, DataBean>list)  {
		InputStream is;
		HSSFWorkbook hssfWorkbook;	
		try {
			File classpathRoot = new File(System.getProperty("user.dir"));
			File appDir = new File(classpathRoot, "testdata");
			File filedata = new File(appDir, path);//此处path指文件名
			is = new FileInputStream(filedata );
			hssfWorkbook = new HSSFWorkbook(is);
			if (data.getNumerSheet()>=0) {
				//System.out.println("读取一张表");
				for (int numSheet = 0; numSheet < hssfWorkbook.getNumberOfSheets(); numSheet++) {
					if (numSheet == data.getNumerSheet()) {
						operateExcels( hssfWorkbook , data,list);
						break;
					}
					
			}
					
			}  else{
				for (int numSheet = 0; numSheet < hssfWorkbook.getNumberOfSheets(); numSheet++) {
					operateExcels( hssfWorkbook , data,list);
				}	
			}

		} catch (Exception e) {
			// TODO: handle exception
			if (readExcelListener != null) {
				readExcelListener.readFail("读取数据异常");
			}			
		}
		//return list;
	}



	/**
	 * 操作excel 表
	 * @param hssfWorkbook  
	 * @param numSheet
	 */
	public void operateExcels(HSSFWorkbook hssfWorkbook ,ExcelData  data,Map<Integer, DataBean>list){
		DataBean  mbean  = null;
		HSSFSheet hssfSheet = hssfWorkbook.getSheetAt(data.getNumerSheet());
		//设置读取的位置
		if (data.getLastIndex() ==0) {
			data.setLastIndex(hssfSheet.getLastRowNum());
		} else{
			data.setLastIndex(data.getLastIndex()-1);
		}
		if (data.getFirstIndex()!=1) {
			data.setFirstIndex(data.getFirstIndex()-1);
		}	
		//System.out.println("index "+index+"setLastIndex"+data.getLastIndex());
		// Read the Row 行
		for (int rowNum = 1; rowNum <= hssfSheet.getLastRowNum(); rowNum++) {
			//Read the column  列	
			if (rowNum>=data.getFirstIndex() && rowNum <=data.getLastIndex()) {
				HSSFRow hssfRow = hssfSheet.getRow(rowNum);	
				if (hssfRow ==null) {
					if (readExcelListener !=null) {
						readExcelListener.readFail("读取数据为空");	
					}
				} else if (hssfRow != null) {
					//获取总列数
					int columnNum = hssfRow.getPhysicalNumberOfCells();
					mbean = new DataBean();
					Class userCla = (Class) mbean.getClass(); 
					//得到类中的所有属性集合
					Field[] classfs = userCla.getDeclaredFields(); 
					int length = classfs.length;
					List<HSSFCell> listcell = new ArrayList<>();
					//获取一行的数据封装在 list中
					for (int i = 0; i < columnNum; i++) {
						listcell.add(i,  hssfRow.getCell(i));
						//System.out.println(getValue(listcell.get(i)));
					}	
					//System.out.println("数据封装在读取对象中");
					//数据封装在读取对象中
				    mbean.setInstructions(getValue(listcell.get(0)) );
				    mbean.setId(getValue(listcell.get(1)));
				    mbean.setBaseTestId(getValue(listcell.get(2)));
				    mbean.setCaseLevel(getValue(listcell.get(3)));
				    mbean.setCaseType(data.getCaseType());
				    mbean.setTestCaseName(getValue(listcell.get(5)));
				    mbean.setPrecondition(getValue(listcell.get(6)));
				    mbean.setSteps(getValue(listcell.get(7)));
				    mbean.setActions(getValue(listcell.get(8)));
				    if (data.getCaseType().equals(Constant.CASETYPE_ANDROID)) {
				    	mbean.setLocationElement(getValue(listcell.get(9)));
					    mbean.setElementAttribute(getValue(listcell.get(10)));	
						
					} else{
						mbean.setLocationElement(getValue(listcell.get(11)));
					    mbean.setElementAttribute(getValue(listcell.get(12)));	
					}
				    //去掉含有.0 的字符串
				    String str = getValue( listcell.get(13));
                    if (str.indexOf(".0")>0) {
                    	mbean.setData(str.substring(0, str.indexOf(".0")));	
					} else if(str.indexOf(".")>0 && str.indexOf("E")>0){
						BigDecimal bd = new BigDecimal(str);//读取excel 表出现科学计数转换为字符窜 
						mbean.setData(bd.toString());
					}else{
						mbean.setData(str);	
					}                 
				    mbean.setCheckPoint(getValue(listcell.get(14)));
				    mbean.setExpectValue(getValue(listcell.get(15)));	
				    mbean.setActualValue(getValue(listcell.get(16)));	
				    mbean.setResult(getValue(listcell.get(17)));
				    mbean.setException(getValue(listcell.get(18)));		    
					//列的封装添加
					list.put( rowNum-data.getFirstIndex(),mbean);
					if (readExcelListener != null) {						
						if (rowNum==hssfSheet.getLastRowNum()) {
							readExcelListener.readSucces(list);
						} else{
							readExcelListener.readIng(rowNum);	
						}
					}				
				}
			}
			
		}
	}
	
	/**
	 * 
	 * @param xssfRow
	 * @return
	 */
	@SuppressWarnings("static-access")
	private static String getValue(XSSFCell xssfRow) {
		if (xssfRow.getCellType() == xssfRow.CELL_TYPE_BOOLEAN) {
			return String.valueOf(xssfRow.getBooleanCellValue());
		} else if (xssfRow.getCellType() == xssfRow.CELL_TYPE_NUMERIC) {
			return String.valueOf(xssfRow.getNumericCellValue());
		} else {
			return String.valueOf(xssfRow.getStringCellValue());
		}
	}

	/**
	 * 根据HSSFCell类型设置数据
	 * @param cell
	 * @return
	 */
	private static String getCellFormatValue(HSSFCell cell) {
		String cellvalue = "";
		if (cell != null) {
			// 判断当前Cell的Type
			switch (cell.getCellType()) {
			// 如果当前Cell的Type为NUMERIC
			case HSSFCell.CELL_TYPE_NUMERIC:
			case HSSFCell.CELL_TYPE_FORMULA: {
				// 判断当前的cell是否为Date
				if (HSSFDateUtil.isCellDateFormatted(cell)) {
					// 如果是Date类型则，转化为Data格式
					//方法1：这样子的data格式是带时分秒的：2011-10-12 0:00:00
					//cellvalue = cell.getDateCellValue().toLocaleString();
					//方法2：这样子的data格式是不带带时分秒的：2011-10-12
					Date date = cell.getDateCellValue();
					SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
					cellvalue = sdf.format(date);
				}
				// 如果是纯数字
				else {
					// 取得当前Cell的数值
					cellvalue = String.valueOf(cell.getNumericCellValue());
				}
				break;
			}
			// 如果当前Cell的Type为STRIN
			case HSSFCell.CELL_TYPE_STRING:
				// 取得当前的Cell字符串
				cellvalue = cell.getRichStringCellValue().getString();
				break;
				// 默认的Cell值
			default:
				cellvalue = " ";
			}
		} else {
			cellvalue = "";
		}
		return cellvalue;

	}

	/**
	 * 返回excel 列值
	 * @param hssfCell
	 * @return
	 */
	@SuppressWarnings("static-access")
	private static String getValue(HSSFCell hssfCell) {
		if (hssfCell.getCellType() == hssfCell.CELL_TYPE_BOOLEAN) {
			return String.valueOf(hssfCell.getBooleanCellValue());
		} else if (hssfCell.getCellType() == hssfCell.CELL_TYPE_NUMERIC) {
			return String.valueOf(hssfCell.getNumericCellValue());
		} else {
			return String.valueOf(hssfCell.getStringCellValue());
		}
	}

	/**
	 * 测试
	 * @param args
	 * @throws IOException
	 * @throws InterruptedException
	 */
	public static void main(String[] args) throws IOException, InterruptedException {
	    Map<Integer, DataBean>  bean = new HashMap<>();
	    ReadExcel  excel =  new ReadExcel();
		ExcelData  excelData =  new ExcelData();
		excelData.setNumerSheet(4);
		excelData.setCaseType(Constant.CASETYPE_ANDROID);
		excelData.setFirstIndex(14);
		excelData.setLastIndex(21);
		excel.readXls("personInfo_TestData.xls", excelData,bean);		
		System.out.println(bean.size());
		for (int i = 0; i < bean.size(); i++) {
			System.out.println(bean.get(i).toString());
		}	
		
	}

	
}
