package com.oribo.common;

import java.io.File;
import java.util.Properties;

import javax.activation.DataHandler;
import javax.activation.FileDataSource;
import javax.mail.Address;
import javax.mail.Authenticator;
import javax.mail.Message;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import javax.mail.internet.MimeUtility;

public class SendEms {
	// 发送邮件
	public static void sendMail()
	{
		String[] tos =
			{ "aaa@aa.com", "bbb@aa.com" };

		// 创建Properties对象，并配置参数
		Properties props = new Properties();
		props.put("mail.transport.protocol", "smtp");
		props.put("mail.smtp.host", "localhost");
		props.put("mail.smtp.auth", "true");
		props.put("mail.debug", "true");

		// 创建Session对象
		Session session = Session.getDefaultInstance(props, new Authenticator()
		{
			// 使用匿名内部类实现，并复写其方法
			@Override
			protected PasswordAuthentication getPasswordAuthentication()
			{
				// PasswordAuthentication类对象用来封装发送者的邮箱账户的用户名和密码
				return new PasswordAuthentication("yangshaojia@ufenqi.com","123456");
			}
		});

		try
		{
			//设置邮件地址
			Address from = new InternetAddress("yangshaojia@ufenqi.com");// 发件人

			String toList = getMailList(tos);
			InternetAddress[] iaToList = new InternetAddress().parse(toList);

			// 创建Message对象
			Message message = new MimeMessage(session);

			// 设置邮件信息头
			message.setFrom(from);
			message.setRecipients(Message.RecipientType.TO, iaToList);// 收件人
			message.setSubject("****测试报告");

			// 编写邮件正文
			// 邮件正文内容
			MimeBodyPart bodyPart = new MimeBodyPart();
			bodyPart.setContent("附件是测试报告", "text/html;charset=UTF-8");

			// 附件部分
			MimeBodyPart attachmentBodyPart = new MimeBodyPart();
			// 创建DataSource
			File attachment = new File("****************");
			FileDataSource dataSource = new FileDataSource(attachment);
			// 创建DataHandler
			DataHandler dataHandler = new DataHandler(dataSource);
			attachmentBodyPart.setDataHandler(dataHandler);

			// 设置附件名称编码
			attachmentBodyPart.setFileName(MimeUtility.encodeWord(attachment
					.getName()));

			// 合成
			MimeMultipart multipart = new MimeMultipart();
			multipart.addBodyPart(bodyPart);
			multipart.addBodyPart(attachmentBodyPart);

			// 将合成信息添加到邮件体中
			message.setContent(multipart);

			// 创建Transport对象发送邮件
			Transport transport = session.getTransport("smtp");
			transport.connect();
			// message.getAllRecipients()获取邮件中所有的收件人
			transport.sendMessage(message, message.getAllRecipients());
			transport.close();

		} catch (Exception e)
		{
			throw new RuntimeException("发送邮件失败：" + e);
		}

	}

	private static String getMailList(String[] mailArray)
	{

		StringBuffer toList = new StringBuffer();
		int length = mailArray.length;
		if (mailArray != null && length < 2)
		{
			toList.append(mailArray[0]);
		} else
		{
			for (int i = 0; i < length; i++)
			{
				toList.append(mailArray[i]);
				if (i != (length - 1))
				{
					toList.append(",");
				}

			}
		}
		return toList.toString();

	}

}
